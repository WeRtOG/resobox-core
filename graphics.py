import asyncio
import json
import time
import websockets
import config
import base64
import Adafruit_SSD1306
from PIL import Image, ImageDraw, ImageFont
from concurrent.futures import ThreadPoolExecutor

disp = None

try:
    disp = Adafruit_SSD1306.SSD1306_128_32(rst=None, i2c_address=0x3C) # –ê–¥—Ä–µ—Å –¥–∏—Å–ø–ª–µ—è - –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–ª—É—á–∞–µ 0x3C
    disp.begin()
    disp.clear()
    disp.display()
except:
    print('üê¶ Failed to connect display (shit)')

displayImage = Image.new('1', (config.screen_width, config.screen_height), 0)
displayDraw = ImageDraw.Draw(displayImage)


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
text = "ResoBox"
font_path = "assets/fonts/noto.ttf"
font_size = 16
x, y = 0, 4  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑
font = ImageFont.truetype(font_path, font_size)
image = Image.new('1', (config.screen_width, config.screen_height), 0)
draw = ImageDraw.Draw(image)


spriteSource = Image.open('assets/sprites/logo.png')
sprite = Image.new('1', (spriteSource.width, spriteSource.height), 0);
spriteDraw = ImageDraw.Draw(sprite)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –ø–∏–∫—Å–µ–ª–µ–π
global_matrix = []

for x in range(spriteSource.width):
    for y in range(spriteSource.height):
        pixel = spriteSource.getpixel((x, y))
        
        # Check if the pixel is black
        # This checks for pure black, but you can adjust the threshold as needed
        if pixel[3] == 255:
            spriteDraw.point((x, y), fill=1)

imageOffset = 0

def update_matrix():
    global x, y, global_matrix, imageOffset
    while True:
        if disp != None:
            fps = config.screen_fps
        else:
            fps = config.screen_fps / 2
            
        draw.rectangle((0, 0, image.width, image.height), fill=0)  # –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        draw.bitmap((imageOffset,0), sprite, 1)

        if imageOffset > image.width:
            imageOffset = -sprite.width


        pixels = image.load()
        global_matrix = [(x, y) for y in range(image.height) for x in range(image.width) if pixels[x, y] == 1]

        time.sleep(1 / fps)

        if disp != None:
            displayDraw.rectangle((0, 0, image.width, image.height), fill=0)
            displayDraw.point(global_matrix, fill=255)
            disp.image(displayImage)
            disp.display()

async def websocket_handler(websocket, path):
    try:
        while True:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
            await websocket.send(json.dumps(global_matrix))
            await asyncio.sleep(1/24)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
    except websockets.exceptions.ConnectionClosedOK:
        print("üõë WebSocket connection closed normally.")
    except Exception as e:
        print(f"üõë WebSocket error: {e}")

def start_update_matrix_thread():
    executor = ThreadPoolExecutor(max_workers=1)
    executor.submit(update_matrix)

async def graphics_server():
    print("\nüì∫ Graphics server started\n")
    start_update_matrix_thread()  # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã

    if disp == None:
        async with websockets.serve(websocket_handler, '0.0.0.0', 8767):
            await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

def start_graphics_server():
    try:
        asyncio.run(graphics_server())
    except KeyboardInterrupt:
        print("\nüõë Graphics server stopped by keyboard interrupt")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
